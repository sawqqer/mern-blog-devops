apiVersion: v1
kind: ServiceAccount
metadata:
  name: aws-secrets-manager-sa
  namespace: mern-blog
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT_ID:role/aws-secrets-manager-role
  labels:
    app: aws-secrets-manager
    component: security
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: aws-secrets-manager-role
  labels:
    app: aws-secrets-manager
    component: security
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: aws-secrets-manager-rolebinding
  labels:
    app: aws-secrets-manager
    component: security
subjects:
- kind: ServiceAccount
  name: aws-secrets-manager-sa
  namespace: mern-blog
roleRef:
  kind: ClusterRole
  name: aws-secrets-manager-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: Secret
metadata:
  name: mern-blog-secrets
  namespace: mern-blog
  labels:
    app: mern-blog
    component: security
type: Opaque
stringData:
  # These will be populated from AWS Secrets Manager
  database-url: "postgresql://user:password@db:5432/mernblog"
  jwt-secret: "your-jwt-secret-key"
  api-key: "your-api-key"
  encryption-key: "your-encryption-key"
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: aws-secrets-sync
  namespace: mern-blog
  labels:
    app: aws-secrets-manager
    component: security
spec:
  schedule: "0 */6 * * *"  # Every 6 hours
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: aws-secrets-manager-sa
          containers:
          - name: aws-secrets-sync
            image: amazon/aws-cli:latest
            command:
            - /bin/bash
            - -c
            - |
              # Sync secrets from AWS Secrets Manager
              aws secretsmanager get-secret-value \
                --secret-id "mern-blog/production/database" \
                --query SecretString --output text | \
                jq -r 'to_entries[] | "\(.key)=\(.value)"' | \
                kubectl create secret generic mern-blog-db-secrets \
                --from-env-file=/dev/stdin \
                --namespace=mern-blog \
                --dry-run=client -o yaml | \
                kubectl apply -f -
              
              aws secretsmanager get-secret-value \
                --secret-id "mern-blog/production/app" \
                --query SecretString --output text | \
                jq -r 'to_entries[] | "\(.key)=\(.value)"' | \
                kubectl create secret generic mern-blog-app-secrets \
                --from-env-file=/dev/stdin \
                --namespace=mern-blog \
                --dry-run=client -o yaml | \
                kubectl apply -f -
            env:
            - name: AWS_REGION
              value: "us-west-2"
            resources:
              requests:
                memory: 128Mi
                cpu: 100m
              limits:
                memory: 256Mi
                cpu: 200m
            securityContext:
              runAsNonRoot: true
              runAsUser: 1000
              runAsGroup: 1000
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities:
                drop:
                - ALL
          restartPolicy: OnFailure
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: aws-secrets-manager-config
  namespace: mern-blog
  labels:
    app: aws-secrets-manager
    component: security
data:
  secrets.yaml: |
    secrets:
      - name: "mern-blog-db-secrets"
        awsSecretId: "mern-blog/production/database"
        namespace: "mern-blog"
      - name: "mern-blog-app-secrets"
        awsSecretId: "mern-blog/production/app"
        namespace: "mern-blog"
      - name: "mern-blog-monitoring-secrets"
        awsSecretId: "mern-blog/production/monitoring"
        namespace: "monitoring"
